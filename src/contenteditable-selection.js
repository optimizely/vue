/**
 * In order to get the cursor position / selection for a contenteditable HTML element, we need to do some
 * fancy stuff. This is necessary for the editable-text directive (and possibly others in the future). This code comes
 * from the following stack overflow post:
 *
 * http://stackoverflow.com/questions/13949059/persisting-the-changes-of-range-objects-after-selection-in-html/13950376#13950376
 * Example here:
 * http://jsfiddle.net/WeWy7/3/
 *
 */
module.exports = {
    /**
     * Given an html element (with contenteditable="true"), returns the current cursor selection.
     * @param containerEl
     * @returns {{start: Number, end: number}}
     */
    saveSelection: function saveSelection(containerEl) {
        var start;
        if (window.getSelection && document.createRange) {
            var range = window.getSelection().getRangeAt(0);
            var preSelectionRange = range.cloneRange();
            preSelectionRange.selectNodeContents(containerEl);
            preSelectionRange.setEnd(range.startContainer, range.startOffset);
            start = preSelectionRange.toString().length;

            return {
                start: start,
                end: start + range.toString().length
            }
        } else if (document.selection && document.body.createTextRange) {
            // This is for IE...
            var selectedTextRange = document.selection.createRange();
            var preSelectionTextRange = document.body.createTextRange();
            preSelectionTextRange.moveToElementText(containerEl);
            preSelectionTextRange.setEndPoint("EndToStart", selectedTextRange);
            start = preSelectionTextRange.text.length;

            return {
                start: start,
                end: start + selectedTextRange.text.length
            }
        }
    },

    /**
     * Given an html element, resets the selection to the start/end specified in savedSel. Expectation
     * is that savedSel was generated by the saveSelection function.
     *
     * @param containerEl
     * @param savedSel {{start: Number, end: number}}
     */
    restoreSelection: function restoreSelection(containerEl, savedSel) {
        if (window.getSelection && document.createRange) {
            var charIndex = 0, range = document.createRange();
            range.setStart(containerEl, 0);
            range.collapse(true);
            var nodeStack = [containerEl], node, foundStart = false, stop = false;

            // This while loop is super confusing. This part of DOM exploration is greek to me though and
            // I trust stack overflow more than trying to figure this out from first principles.
            // Here's the w3 article on nodeType http://www.w3schools.com/jsref/prop_node_nodetype.asp
            // nodeType == 3 is text. Basically it's taking the element and trying to find the text part of the element
            // Once it has that, it moves one chunk of text at a time until it finds the beginning / end
            // of the desired selection, and then creates that range.
            while (!stop && (node = nodeStack.pop())) {
                if (node.nodeType === 3) {
                    var nextCharIndex = charIndex + node.length;
                    if (!foundStart && savedSel.start >= charIndex && savedSel.start <= nextCharIndex) {
                        range.setStart(node, savedSel.start - charIndex);
                        foundStart = true;
                    }
                    if (foundStart && savedSel.end >= charIndex && savedSel.end <= nextCharIndex) {
                        range.setEnd(node, savedSel.end - charIndex);
                        stop = true;
                    }
                    charIndex = nextCharIndex;
                } else {
                    var i = node.childNodes.length;
                    while (i--) {
                        nodeStack.push(node.childNodes[i]);
                    }
                }
            }

            var sel = window.getSelection();
            sel.removeAllRanges();
            sel.addRange(range);
        } else if (document.selection && document.body.createTextRange) {
            // This is for IE...
            var textRange = document.body.createTextRange();
            textRange.moveToElementText(containerEl);
            textRange.collapse(true);
            textRange.moveEnd("character", savedSel.end);
            textRange.moveStart("character", savedSel.start);
            textRange.select();
        }
    }
}
